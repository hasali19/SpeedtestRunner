@page "/"
@inject SpeedtestRunner.Services.SpeedtestRunnerService SpeedtestRunner
@inject SpeedtestRunner.Data.AppDbContext DbContext

<div class="row mt-5 mb-1">
    <div class="col-sm-12">
        @if (SpeedtestRunner.IsRunning)
        {
            <div class="alert alert-warning" role="alert">
                Speed test in progress...
            </div>
        }
        else
        {
            <div class="alert alert-success" role="alert">
                Next run scheduled for: @SpeedtestRunner.NextRun.ToString("g")
            </div>
        }
    </div>
</div>

<div class="row mt-3 mb-1">
    <div class="col-sm-12 col-md-8 offset-md-2">
        <ResultsChart />
    </div>
</div>

<div class="row mt-1 mb-1">
    <div class="col-sm-12">
        <h1 class="display-4">Results</h1>
    </div>
</div>

<div class="row mt-1 mb-1">
    <div class="col-sm-12">
        <table class="table table-striped table-borderless">
            <thead>
                <tr>
                    <th scope="col">Timestamp</th>
                    <th scope="col">Latency (ms)</th>
                    <th scope="col">Download (Mbps)</th>
                    <th scope="col">Upload (Mbps)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var test in DbContext.Speedtests.OrderByDescending(s => s.Timestamp))
                {
                    <tr>
                        <td>@test.Timestamp.ToString("g")</td>
                        <td>@test.ServerLatency</td>
                        <td>@($"{test.DownloadSpeed / 1000:F}")</td>
                        <td>@($"{test.UploadSpeed / 1000:F}")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@functions {

    protected override void OnInitialized()
    {
        SpeedtestRunner.RunStarted += InvokeStateHasChanged;
        SpeedtestRunner.RunCompleted += _ => InvokeStateHasChanged();
        SpeedtestRunner.NextRunScheduled += _ => InvokeStateHasChanged();
    }

    private void InvokeStateHasChanged() => InvokeAsync(StateHasChanged);

}
