@inherits ComponentBase
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.LineChart.Axes
@using ChartJs.Blazor.ChartJS.LineChart.Axes.Ticks
@using SpeedtestRunner.Data.Models
@inject SpeedtestRunner.Services.SpeedtestRunnerService SpeedtestRunner
@inject SpeedtestRunner.Data.AppDbContext DbContext

<ChartJs.Blazor.Charts.ChartJsLineChart @ref="_chart" Config="_config" Width="600" Height="300" />

@code {

    private ChartJsLineChart _chart;

    private LineDataset<TimeTuple<double>> _download = new LineDataset<TimeTuple<double>>
    {
        BorderColor = ColorUtil.ColorString(255, 100, 0, 1.0),
        Label = "Download Speed (Mbps)",
        Fill = false,
        PointBackgroundColor = ColorUtil.RandomColorString(),
        BorderWidth = 2,
        PointRadius = 2,
        PointBorderWidth = 1,
        LineTension = 0.2
    };

    private LineDataset<TimeTuple<double>> _upload = new LineDataset<TimeTuple<double>>
    {
        BorderColor = ColorUtil.ColorString(255, 200, 0, 1.0),
        Label = "Upload Speed (Mbps)",
        Fill = false,
        PointBackgroundColor = ColorUtil.RandomColorString(),
        BorderWidth = 2,
        PointRadius = 2,
        PointBorderWidth = 1,
        LineTension = 0.2,
    };

    private LineConfig _config = new LineConfig
    {
        Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "Internet Speeds"
            },
            Legend = new Legend
            {
                Position = Positions.Right,
                Labels = new LegendLabelConfiguration
                {
                    UsePointStyle = true
                }
            },
            Tooltips = new Tooltips
            {
                Mode = InteractionMode.Nearest,
                Intersect = false
            },
            Scales = new Scales
            {
                xAxes = new List<CartesianAxis>
            {
                    new TimeAxis
                    {
                        Distribution = TimeDistribution.Linear,
                        Time = new TimeOptions
                        {
                            TooltipFormat = "DD/MM/YYYY HH:mm"
                        }
                    }
                },
                yAxes = new List<CartesianAxis>()
            {
                    new LinearCartesianAxis
                    {
                        Ticks = new LinearCartesianTicks
                        {
                            BeginAtZero = true
                        },
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Speed (Mbps)"
                        }
                    }
                }
            },
            Hover = new LineOptionsHover
            {
                Intersect = true,
                Mode = InteractionMode.Y
            }
        }
    };

    protected override void OnInitialized()
    {
        var results = DbContext.Speedtests.OrderBy(s => s.Timestamp).ToList();

        _download.AddRange(results.Select(SpeedtestDownloadTuple));
        _upload.AddRange(results.Select(SpeedtestUploadTuple));

        _config.Data.Datasets.Add(_download);
        _config.Data.Datasets.Add(_upload);

        SpeedtestRunner.RunCompleted += OnRunCompleted;
    }

    private void OnRunCompleted(Speedtest test) => InvokeAsync(() =>
    {
        _download.Add(SpeedtestDownloadTuple(test));
        _upload.Add(SpeedtestUploadTuple(test));

        _chart.Update();
    });

    private TimeTuple<double> SpeedtestDownloadTuple(Speedtest test)
        => new TimeTuple<double>(
            new Moment(test.Timestamp.DateTime),
            test.DownloadSpeed / 1000);

    private TimeTuple<double> SpeedtestUploadTuple(Speedtest test)
        => new TimeTuple<double>(
            new Moment(test.Timestamp.DateTime),
            test.UploadSpeed / 1000);

}
